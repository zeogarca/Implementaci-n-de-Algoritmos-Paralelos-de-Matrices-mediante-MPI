#include <mpi.h>
#include <stdio.h>
#include "../include/matrix.h"
#include "../include/utils.h"

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (argc != 3) {
        if (rank == 0) {
            printf("Uso: %s <filas_matriz> <columnas_matriz>\n", argv[0]);
        }
        MPI_Finalize();
        return 1;
    }

    int rows = atoi(argv[1]);
    int cols = atoi(argv[2]);

    // Solo el proceso 0 crea las matrices
    Matrix A, B;
    if (rank == 0) {
        A = create_matrix(rows, cols);
        B = create_matrix(cols, rows);  // Para multiplicación válida
        fill_matrix_random(A, 0.0, 10.0);
        fill_matrix_random(B, 0.0, 10.0);
    }

    // Distribuir matrices y calcular en paralelo
    // (Implementación paralela aquí)
    // ...

    if (rank == 0) {
        printf("Matriz A:\n");
        print_matrix(A);
        printf("Matriz B:\n");
        print_matrix(B);
    }

    MPI_Finalize();
    return 0;
}
